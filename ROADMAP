Roadmap for the game
====================

A block falls
	We track it's position from the beginning
		Use of a loop 

Every block is composed of squares, each one fills
a cell of the grid

The grid is controlled with a bidimensional array
 
				 	 0123456789...
				 	 __________        10 x 20
					|          | 0
					|					 | 1
					|					 | 2
					|					 | 3 
					|					 | 4
					|					 | 5
					|					 | 6
					|					 | 7
					|__________| 8...


There is no need to store the px positions
in a virtual grid !

Cell 7x8 = 7x35 , 8x35 = 245,360

Track a cell:

We get it's x/y position and divide each by 35,
then round. We do that constantly to know where
is that block until it touches ground/block.
When collision, we pause the tween, and re-fill
the virtual grid.

We create an array of blocks that contains Block
objects

Block: {
	sprite: sprite,
	tween:  tween,
	cells:  [[x,y]...] // Array of used cells 					  							  in the grid
	shape:  'column'/'triangle'...
}

We also have the bidimensional grid array to easily know which cells are occupied.

Example of grid with a column at the top-left:
Grid = [[1,0], [1,0], [1,0]]

Blocks:

Every block has a different shape and uses several
cells.

   Shapes:

		  o      o  oo   oo
		ooo ooo ooo oo  oo

By knowing x/y and the type of shape we can
acknowledge which cells is it occupying in the grid, also later on the position.

Blocks have their axis situated in the top left
corner using an anchor.

Block Column

 o
 o
 o

Is 3 blocks large to the bottom 
If detected on cell (4,5) it ocuppies (4,5) (5,5) (6,5) 

Detect block position:

Read x,y from sprite and divide each by 35



